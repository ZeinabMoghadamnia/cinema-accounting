# Generated by Django 4.2.7 on 2024-09-10 11:29

from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('financial_report', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='date created')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='date updated')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='delete status')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='date deleted')),
                ('restored_at', models.DateTimeField(blank=True, null=True, verbose_name='date restored')),
                ('user_type', models.CharField(blank=True, choices=[('manager', 'Manager'), ('vendor', 'Vendor'), ('employee', 'Employee')], max_length=20, null=True, verbose_name='user type')),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(max_length=11, unique=True, validators=[django.core.validators.RegexValidator(message="Please enter the phone number in this format: '09999999999'", regex='^(\\+98|0)?9\\d{9}$')], verbose_name='phone')),
                ('first_name', models.CharField(max_length=40, verbose_name='first name')),
                ('last_name', models.CharField(max_length=40, verbose_name='last name')),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_permission_set', to='auth.permission')),
            ],
            options={
                'verbose_name_plural': 'user',
            },
        ),
        migrations.CreateModel(
            name='Payroll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='date created')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='date updated')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='delete status')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='date deleted')),
                ('restored_at', models.DateTimeField(blank=True, null=True, verbose_name='date restored')),
                ('salary', models.IntegerField(verbose_name='salary')),
                ('net_salary', models.IntegerField(blank=True, null=True, verbose_name='net salary')),
                ('date', models.DateField(verbose_name='date')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pay_roll', to=settings.AUTH_USER_MODEL, verbose_name='employee')),
                ('tax', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pay_roll', to='financial_report.tax', verbose_name='tax')),
            ],
        ),
        migrations.CreateModel(
            name='EmployeePerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='date created')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='date updated')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='delete status')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='date deleted')),
                ('restored_at', models.DateTimeField(blank=True, null=True, verbose_name='date restored')),
                ('performance_type', models.CharField(choices=[('overtime', 'Overtime'), ('absence', 'Absence')], max_length=20, verbose_name='performance type')),
                ('number_of_hours', models.IntegerField(verbose_name='performance value')),
                ('date', models.DateField(verbose_name='date')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employee_performance_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='payroll',
            constraint=models.UniqueConstraint(condition=models.Q(('created_at__month', 9), ('created_at__year', 2024)), fields=('employee',), name='unique_payroll_per_employee_per_month'),
        ),
    ]
